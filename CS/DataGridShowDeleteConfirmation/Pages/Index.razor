@page "/"

@using DataGridShowDeleteConfirmation.Data
@inject WeatherForecastService ForecastService

@if (forecasts == null) {
    <p><em>Loading...</em></p>
}
else {
    <DxGrid Data="@forecasts" CssClass="mw-1100" @ref="myGrid">
        <Columns>
            <DxGridCommandColumn Width="70px" NewButtonVisible="false">
                <CellDisplayTemplate Context="myContext">
                    <DxButton Text="Delete" RenderStyle="ButtonRenderStyle.Link" RenderStyleMode="ButtonRenderStyleMode.Contained"  Click="@((e) => OnDeleteButtonClick(e, myContext))" />
                </CellDisplayTemplate>
            </DxGridCommandColumn>
            <DxGridDataColumn Caption="Date" FieldName="Date"/>
            <DxGridDataColumn Caption="Temperature" FieldName="TemperatureF"/>
        </Columns>
    </DxGrid>
    <DxPopup @bind-Visible="@popupVisible" HeaderText="Please confirm" Width="auto" CloseOnOutsideClick="false">
        You are about to delete the record with the id = @dataSourceIndex. Are you sure?
        <div class="dxbs-grid-confirm-dialog-buttons">
            <DxButton Text="Cancel " RenderStyle="ButtonRenderStyle.Success" Click="@OnCancelButtonClick"/>
            <DxButton Text="Confirm" RenderStyle="ButtonRenderStyle.Danger" Click="@OnConfirmButtonClick"/>
        </div>
    </DxPopup>
}

@code {
    bool popupVisible { get; set; } = false;
    IGrid myGrid { get; set; }
    Int32 dataSourceIndex { get; set; }

    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync() {
        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);
    }

    void OnDeleteButtonClick(MouseEventArgs args, GridCommandColumnCellDisplayTemplateContext context) {
        WeatherForecast itemToDelete = myGrid.GetDataItem(context.VisibleIndex) as WeatherForecast;
        dataSourceIndex = Array.IndexOf(forecasts, itemToDelete);
        popupVisible = true;
    }

    void OnConfirmButtonClick(MouseEventArgs args) {
        forecasts = forecasts.Where((value, dataIndex) => dataIndex != dataSourceIndex).ToArray();
        myGrid.Reload();
        popupVisible = false;
    }

    void OnCancelButtonClick(MouseEventArgs args) {
        popupVisible = false;
    }
}